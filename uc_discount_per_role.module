<?php

 // $Id$

/*
 * @file
 *
 * Implementation discount per user role functional for Ubercart
 *
 */

/*
 * Implementation hook_menu
 */
function uc_discount_per_role_menu() {
  $items = array();
  $items['admin/store/settings/discount_per_role'] = array(
    'title' => 'Discount per role',
    'access arguments' => array('administer products'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_discount_per_role_settings_form'),
    'weight' => -6,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function uc_discount_per_role_settings_form() {
  $form = array();
  $roles = user_roles();
  foreach ($roles as $rid => $role) {
    $form['discount_settings_'. $rid] = array(
      '#type' => 'fieldset',
      '#title' => t($role),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['discount_settings_'. $rid]['discount_value_'. $rid] = array(
      '#type' => 'textfield',
      '#title' => t('Discount value'),
      '#description' => t(''),
      '#default_value' => variable_get('discount_value_'. $rid, 0),
    );
  }
  $form['view_discount_total'] = array(
    '#type' => 'checkbox',
    '#title' => t('View discount'),
    '#default_value' => variable_get('view_discount_total', 0),
    '#description' => t('If this is checked, the price with discount will be populated on the product page and teaser.'),
  );
  return system_settings_form($form);
}

/*
 * Implementation hook_perm
 */
function uc_discount_per_role_perm() {
  return array('administer discount');
}

/*
 * Implementation hook_form_alter
 */
function uc_discount_per_role_form_alter(&$form, $form_state) {
  $type = $form['#node_type'];
  if (!uc_product_is_product($type->type)) {
    return;
  }
  $form['uc_product']['discount'] = array(
    '#type' => 'radios',
    '#title' => t('Set discount'),
    '#default_value' => variable_get('discount_'. $form['#node_type']->type, 0),
    '#options' => array(t('Disabled'), t('Enabled')),
  );
}


/*
 * Implementation hook_cart_item
 */
function uc_discount_per_role_cart_item($op, &$item) {
  switch ($op) {
    case 'load':
      $type = db_result(db_query("SELECT type FROM {node} WHERE nid = %d", $item->nid));
      if (variable_get('discount_'. $type, 0)) {
        global $user;
        $old_price = $item->price;
        $item->price = uc_discount_per_role_calculate($old_price, $user);
      }
    break;
  }
}

function uc_discount_per_role_calculate($price, $user) {
  $roles = $user->roles;
  $discount = uc_discount_per_role_get_discount_by_roles($roles);
  $new_price = round($price / 100 * (100 - $discount), 2);

  return $new_price;
}

function uc_discount_per_role_get_discount_by_roles($roles) {
  if (!empty($roles)) {
    $discount = 0;
    foreach ($roles as $rid => $role) {
      $new_discount = variable_get('discount_value_'. $rid, 0);
      if ($new_discount > $discount) {
        $discount = $new_discount;
      }
    }
  }
  return $discount;
}

function uc_discount_per_role_checkout_pane() {
  $panes[] = array(
    'id' => 'discount',
    'callback' => 'uc_discount_per_role_total_display',
    'title' => t('Discount information'),
    'weight' => 2,
  );
  return $panes;
}

function uc_discount_per_role_total_display($op, &$arg1, $arg2) {
  global $user;
  switch ($op) {
    case 'view':
      break;
    case 'process':
      return TRUE;
    case 'review':
      if ($user->uid) {
        $output = '<div class="discount">'. t('Your discount is !rate%.', array('!rate' => uc_discount_per_role_get_discount_by_roles($user->roles))) .'</div>';
        $output .= '<div class="message">'. t('You are saving !save', array('!save' => uc_discount_per_role_total_all_economy($arg1->products))) .'</div>';}
      else {
        $output = '<div class="discount">'. t('Since you are not a registered user you have no discount.') .'</div>';
      }
      $review[] = array('title' => t('Discount'), 'data' => $output);
      return $review;
  }
}

function uc_discount_per_role_total_all_economy($items = array()) {
  $economy = 0;
  foreach ($items as $item) {
    $old_price = round(db_result(db_query("SELECT sell_price FROM {uc_products} WHERE nid = %d", $item->nid)), 2);
    if ($old_price > $item->price) {
      $economy += uc_discount_per_role_total_economy_calc($item->price) * $item->qty;
    }
  }
  return $economy;
}

function uc_discount_per_role_total_economy_calc($total) {
  global $user;
  $discount = uc_discount_per_role_get_discount_by_roles($user->roles);
  if ($user->uid && $discount) {
    return round($total * 100 / (100 - $discount) - $total, 2);
  }
}

/*
 * Implementation hook_nodeapi
 */
function uc_discount_per_role_nodeapi(&$node, $op) {
  if (variable_get('discount_' . $node->type, 0)) {
    switch ($op) {
      case 'load':
        if (uc_product_is_product($node->type)) {
          global $user;
          $new_price = uc_discount_per_role_calculate($node->sell_price, $user);
          $node->new_price = $new_price;
        }
        break;
      case 'view':
        if (variable_get('view_discount_total', 0)) {
          $node->content['sell_price_new'] = array(
            '#value' => theme('uc_discount_per_role_total_new_price', $node->new_price),
            '#access' => 1,
            '#weight' => 4,
          );
        }
        break;
    }
  }
}

function theme_uc_discount_per_role_total_new_price($price = 0) {
  if ($price) {
    $output = '<div class="discount-prise"><p>'. t('Discount price: ') . uc_currency_format($price) .'</p></div>';
  }
  return $output;
}

function uc_discount_per_role_theme() {
  return array(
    'uc_discount_per_role_total_new_price' => array(
      'arguments' => array('price' => 0),
    ),
  );
}